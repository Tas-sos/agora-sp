# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2017-06-29 12:23
from __future__ import unicode_literals

import ckeditor_uploader.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('owner', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ExternalService',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=None, max_length=255, unique=True)),
                ('description', ckeditor_uploader.fields.RichTextUploadingField()),
                ('service', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('details', models.CharField(blank=True, default=None, max_length=255, null=True)),
            ],
            options={
                'verbose_name_plural': '4. External Services',
            },
        ),
        migrations.CreateModel(
            name='Roles',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(default='spectator', max_length=90, unique=True, verbose_name='role')),
            ],
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=None, max_length=255, unique=True)),
                ('description_external', ckeditor_uploader.fields.RichTextUploadingField()),
                ('description_internal', ckeditor_uploader.fields.RichTextUploadingField()),
                ('service_area', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('service_type', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('request_procedures', ckeditor_uploader.fields.RichTextUploadingField()),
                ('funders_for_service', ckeditor_uploader.fields.RichTextUploadingField()),
                ('value_to_customer', ckeditor_uploader.fields.RichTextUploadingField()),
                ('risks', ckeditor_uploader.fields.RichTextUploadingField()),
                ('competitors', ckeditor_uploader.fields.RichTextUploadingField()),
                ('logo', models.ImageField(default='/var/www/html/agora/static/img/logos/logo-none.jpg', upload_to='/home/thanasis/agora/static/img/logos')),
                ('id_contact_information', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='external_contact_info', to='owner.ContactInformation')),
                ('id_contact_information_internal', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='internal_contact_info', to='owner.ContactInformation')),
                ('id_service_owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='owner.ServiceOwner')),
            ],
            options={
                'verbose_name_plural': '1. Services',
            },
        ),
        migrations.CreateModel(
            name='Service_DependsOn_Service',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('id_service_one', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_one', to='service.Service')),
                ('id_service_two', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_two', to='service.Service')),
            ],
            options={
                'verbose_name_plural': '3. Internal Dependencies',
            },
        ),
        migrations.CreateModel(
            name='Service_ExternalService',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('id_external_service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service.ExternalService')),
                ('id_service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service.Service')),
            ],
            options={
                'verbose_name_plural': '5. External Dependencies',
            },
        ),
        migrations.CreateModel(
            name='ServiceArea',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('icon', models.ImageField(default='/var/www/html/agora/static/img/logos/logo-none.jpg', upload_to='/home/thanasis/agora/static/img/logos')),
            ],
            options={
                'verbose_name_plural': '6. Service Areas',
            },
        ),
        migrations.CreateModel(
            name='ServiceDetails',
            fields=[
                ('id', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('version', models.CharField(blank=True, default=None, max_length=255)),
                ('features_current', ckeditor_uploader.fields.RichTextUploadingField()),
                ('features_future', ckeditor_uploader.fields.RichTextUploadingField()),
                ('usage_policy_has', models.BooleanField(default=False)),
                ('usage_policy_url', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('privacy_policy_has', models.BooleanField(default=False)),
                ('privacy_policy_url', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('user_documentation_has', models.BooleanField(default=False)),
                ('user_documentation_url', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('operations_documentation_has', models.BooleanField(default=False)),
                ('operations_documentation_url', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('monitoring_has', models.BooleanField(default=False)),
                ('monitoring_url', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('accounting_has', models.BooleanField(default=False)),
                ('accounting_url', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('business_continuity_plan_has', models.BooleanField(default=False)),
                ('business_continuity_plan_url', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('disaster_recovery_plan_has', models.BooleanField(default=False)),
                ('disaster_recovery_plan_url', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('decommissioning_procedure_has', models.BooleanField(default=False)),
                ('decommissioning_procedure_url', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('cost_to_run', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('cost_to_build', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('use_cases', ckeditor_uploader.fields.RichTextUploadingField()),
                ('is_in_catalogue', models.BooleanField(default=False)),
                ('id_service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service.Service')),
            ],
            options={
                'verbose_name_plural': '2. Service Versions',
            },
        ),
        migrations.CreateModel(
            name='ServiceStatus',
            fields=[
                ('id', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('value', models.CharField(default=None, max_length=255)),
                ('order', models.IntegerField(default=None)),
            ],
            options={
                'verbose_name_plural': '2. Service Status',
            },
        ),
        migrations.CreateModel(
            name='UserCustomer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, choices=[('Individual Researchers', 'Individual Researchers'), ('Community Manager', 'Community Manager'), ('Service Provider', 'Service Provider'), ('Data Project Principle Investigator (PI)', 'Data Project Principle Investigator (PI)')], default=None, max_length=255)),
                ('role', ckeditor_uploader.fields.RichTextUploadingField()),
                ('service_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service.Service')),
            ],
            options={
                'verbose_name_plural': '7. Users / Customers of a Service',
            },
        ),
        migrations.AddField(
            model_name='servicedetails',
            name='status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service.ServiceStatus'),
        ),
        migrations.AddField(
            model_name='roles',
            name='id_service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service.Service'),
        ),
        migrations.AddField(
            model_name='roles',
            name='id_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='servicedetails',
            unique_together=set([('id_service', 'version')]),
        ),
        migrations.AlterUniqueTogether(
            name='service_externalservice',
            unique_together=set([('id_service', 'id_external_service')]),
        ),
        migrations.AlterUniqueTogether(
            name='service_dependson_service',
            unique_together=set([('id_service_one', 'id_service_two')]),
        ),
    ]
